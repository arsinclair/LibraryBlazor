@page "/cms/{entityName}/"
@inject IEntityRepository connection
@inject IMetadataRepository metadataClient
@inject NavigationManager NavigationManager

<div style="margin-bottom: 1rem;">
    <button class="btn btn-success rounded-0 mt-2" @onclick="@(e => NavigateTo($"/cms/{entityName}/new"))"><i class="fas fa-plus"></i> New</button>
    <button class="btn btn-secondary rounded-0 mt-2" disabled><i class="far fa-trash-alt"></i> Delete</button>
</div>

<table class="table table-striped table-sm">
    <thead>
        <tr>
            @foreach (string columnName in columns)
            {
                <th>@columnName</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (Entity entity in entities)
        {
            <tr class="table-record" @onclick=@(() => NavigateTo($"/cms/{entityName}/{entity.Id}/edit"))>
                @foreach (string fieldName in columns)
                {
                    <td>@(entity.Contains(fieldName) ? entity[fieldName] : string.Empty)</td>
                }
            </tr>
        }
    </tbody>
</table>

<Pagination TotalCount="@TotalCount" ListQuery="@listQuery" RecordsPerPage=@RecordsPerPage ListQueryChanged="HandleListQueryChanged" />

@code {
    [Parameter]
    public string entityName { get; set; }

    int TotalCount = 0;
    int RecordsPerPage = 35;
    QueryExpression listQuery;

    private List<Entity> entities;
    private string[] columns;

    protected override void OnInitialized()
    {
        SysListLayout layout = metadataClient.GetDefaultListLayout(entityName);
        if (layout == null || layout.Columns == null || layout.Columns.Length == 0)
        {
            throw new Exception($"The layout for {entityName} is either not found or empty.");
        }
        columns = layout.Columns.Split(",");
        listQuery = new QueryExpression(entityName);
        listQuery.ColumnSet = new ColumnSet(columns);
        listQuery.PageInfo.Count = RecordsPerPage;
        listQuery.PageInfo.PageNumber = 0;
        listQuery.AddOrder("ModifiedOn", OrderType.Descending);

        LoadRecords();
    }

    void LoadRecords()
    {
        entities = connection.Get(listQuery).ToList();
        TotalCount = connection.RetrieveTotalRecordCount(entityName, listQuery.Criteria);
    }

    private void HandleListQueryChanged(QueryExpression newListQuery)
    {
        listQuery = newListQuery;
        LoadRecords();
    }

    private void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }
}