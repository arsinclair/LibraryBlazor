@namespace Library.Client.Components.Fields
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.IO

<div class="row g-1 align-items-center">
    <div class="col-auto">
        <label class="col-form-label-sm">@FieldDefinition.DisplayName</label>
    </div>

    <div class="col-auto">
        @if (internalValue == null)
        {
            <InputFile class="form-control rounded-0" OnChange="@LoadFiles" />
        }
        else if (!string.IsNullOrEmpty(mimeType) && Entity != null && Entity.Id != Guid.Empty)
        {
            <a href="/api/File/@Entity.Id" target="_blank">
                <img style="max-width: 255px;" src="/api/File/@Entity.Id" />
            </a>
        }
        else if (!string.IsNullOrEmpty(base64EncodedFile)) {
            <img style="max-width: 255px;" src="@base64EncodedFile" />
        }
    </div>

    @if (internalValue == null)
    {
        <div class="col-auto">
            <span class="form-text">Upload limit: @uploadFileSizeLimit MB</span>
        </div>
    }

    <div class="col-auto">
        @if (isLoading)
        {
            <p>Uploading...</p>
        }
        @if (!string.IsNullOrEmpty(exceptionMessage))
        {
            <div class="alert alert-danger" role="alert">@exceptionMessage</div>
        }
    </div>
</div>

@if (internalValue != null)
{
    <div class="row g-1 align-items-center">
        <div class="col-auto">
            <label class="col-form-label-sm">Actions</label>
        </div>
        <div class="col-auto">
            <button class="btn btn-sm btn-danger rounded-0" @onclick="RemoveFileContent" @onclick:preventDefault="true">Remove File</button>
        </div>

        @if (Entity != null)
        {
            <div class="col-auto">
                @if (Entity.Id != Guid.Empty)
                {
                    <a class="btn btn-sm btn-outline-dark rounded-0" href="/api/File/Download/@Entity.Id" role="button">Download</a>
                }
                else
                {
                    <div class="alert alert-danger rounded-0" role="alert">Entity ID is not found</div>
                }
            </div>
        }
    </div>
}

@code {
    private bool isLoading;
    private int uploadFileSizeLimit = 50; // 50 MB
    private string mimeType;
    string exceptionMessage;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        @if (Entity != null && Entity.Attributes.Contains("ContentType"))
        {
            mimeType = (string)Entity.Attributes["ContentType"];
            if ((new[] { "image/jpeg", "image/png" }).Contains(mimeType) == false)
            {
                mimeType = string.Empty;
            }
        }
    }

    private string EncodeToBase64(byte[] file, string mimeType)
    {
        if (mimeType.Split("/")[0] == "image") {
            return "data:" + mimeType + ";base64," + Convert.ToBase64String(file);
        }
        return null;
    }

    string base64EncodedFile;
    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        exceptionMessage = string.Empty;
        var ms = new MemoryStream();
        try
        {
            await e.File.OpenReadStream(1024 * 1024 * uploadFileSizeLimit).CopyToAsync(ms);
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }
        internalValue = ms.ToArray();
        base64EncodedFile = EncodeToBase64(internalValue, e.File.ContentType);
        isLoading = false;
    }

    private void RemoveFileContent()
    {
        internalValue = null;
        base64EncodedFile = null;
    }

    [Parameter]
    public SysField FieldDefinition { get; set; }

    [Parameter]
    public Entity Entity { get; set; }

    private byte[] internalValue
    {
        get => Output as byte[];
        set
        {
            if (value != (Output as byte[]))
            {
                OutputChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public object Output { get; set; }

    [Parameter]
    public EventCallback<object> OutputChanged { get; set; }
}