@namespace Library.Client.Components.Fields
@inject IEntityRepository connection

<div class="row g-1 align-items-center form-group-lookup">
    <div class="col-auto">
        <label for="@(FieldDefinition.Name)_control" class="col-form-label-sm">@FieldDefinition.DisplayName</label>
    </div>

    <div class="col-auto">
        @if (internalValue.LogicalName == "File" && internalValue.Id != Guid.Empty)
        {
            <a href="/api/File/@internalValue.Id" target="_blank">
                <img src="/api/File/@internalValue.Id" style="max-width: 255px;" />
            </a>
        }
        <div class="input-group">
            <input id="@(FieldDefinition.Name)_control" type="text" class="form-control form-control-sm rounded-0" disabled value=@(internalValue.Name ?? "(none)")>
            <button class="btn btn-outline-secondary rounded-0" type="button" @onclick="ToggleSearchMenu"><i class="fas fa-search fa-sm" aria-hidden="true"></i></button>
        </div>
    </div>

    <div class="search-menu rounded-0 @isMenuHiddenClassName">
        <div class="search-menu-header">
            <label>Search for @FieldDefinition.ParentEntity.DisplayNamePlural</label>
            <div @onclick="ToggleSearchMenu"><i class="fas fa-times search-menu-close-icon" aria-hidden="true"></i></div>
        </div>
        <hr>
        <input type="text" placeholder="Search" @oninput="@(e => SearchStarted(e))" @bind="SearchString">
        <div class="search-results">
            <div @onclick="ClearSelectedValue" class="search-result">[clear]</div>
            @foreach (var item in SearchResults)
            {
                <div @onclick="@(e => SearchResultSelected(item.Id.ToString()))" class="search-result">@item[LookupNameSource]?.ToString()</div>
            }
        </div>
        <hr>
        <div>@SearchResults.Count results found.</div>
    </div>
</div>

@code {
    #region Logic
    private string isMenuHiddenClassName = "hidden";

    private Entity GetSelectedEntity(EntityReference entityReference, string searchFieldName)
    {
        return connection.GetById(entityReference, searchFieldName);
    }

    private void ToggleSearchMenu()
    {
        if (string.IsNullOrEmpty(isMenuHiddenClassName))
        {
            CloseSearchMenu();
        }
        else
        {
            OpenSearchMenu();
        }
    }

    private void CloseSearchMenu()
    {
        ClearSearchResults();
        isMenuHiddenClassName = "hidden";
    }

    private void OpenSearchMenu()
    {
        ClearSearchResults();
        if (PreloadRecordsCount > 0)
        {
            var preloadQE = new QueryExpression(internalValue.LogicalName)
                {
                    ColumnSet = new ColumnSet(LookupNameSource),
                    PageInfo = new PagingInfo()
                    {
                        Count = PreloadRecordsCount
                    }
                };
            preloadQE.Orders.Add(new OrderExpression("ModifiedOn", OrderType.Descending));
            var _searchResults = connection.Get(preloadQE);
            SearchResults = _searchResults.ToList();
        }
        isMenuHiddenClassName = string.Empty;
        StateHasChanged();
    }

    private void ClearSelectedValue()
    {
        internalValue = new EntityReference(internalValue.LogicalName);
        ClearSearchResults();
        ToggleSearchMenu();
    }
    private void ClearSearchResults()
    {
        SearchString = string.Empty;
        SearchResults.Clear();
    }

    private void SearchResultSelected(string id)
    {
        var _id = Guid.Parse(id);
        var result = SearchResults.Single(x => x.Id == _id);
        internalValue = result.ToEntityReference(result[LookupNameSource]?.ToString());
        ClearSearchResults();
        ToggleSearchMenu();
    }

    private Timer searchTimer = new Timer(400);
    private string SearchString;
    private List<Entity> SearchResults = new List<Entity>();

    void SearchStarted(ChangeEventArgs e)
    {
        if (SearchString.ToLower() != e.Value.ToString().ToLower())
        {
            SearchString = e.Value.ToString();
            if (SearchString.Length >= 3)
            {
                searchTimer.Stop();
                searchTimer.Start();
            }
        }
    }

    private async void DoSearch(Object source, ElapsedEventArgs e)
    {
        searchTimer.Stop();
        if (!string.IsNullOrEmpty(SearchString))
        {
            var searchQE = new QueryExpression(internalValue.LogicalName)
                {
                    ColumnSet = new ColumnSet(LookupNameSource),
                    Criteria = new FilterExpression()
                };
            searchQE.Criteria.Queries.Add(new ConditionExpression(LookupNameSource, ConditionOperator.Like, SearchString));
            var _searchResults = connection.Get(searchQE);
            SearchResults = _searchResults.ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        if (internalValue == null)
        {
            // Set an initial value and exit the OnParametersSet() logic, because it will be triggered again by the assignment
            internalValue = new EntityReference(FieldDefinition.ReferenceTarget.TargetField.ParentEntity.Name);
            return;
        }

        if (internalValue.Id != Guid.Empty)
        {
            var entity = GetSelectedEntity(internalValue, LookupNameSource);
            if (entity != null && entity.Attributes.Contains(LookupNameSource))
            {
                internalValue.Name = entity[LookupNameSource].ToString();
            }
        }
    }

    protected override void OnInitialized()
    {
        searchTimer.Elapsed += DoSearch;
    }
    #endregion

    [Parameter]
    public SysField FieldDefinition { get; set; }

    private EntityReference internalValue
    {
        get => Output as EntityReference;
        set
        {
            if (value.SameAs(Output as EntityReference) == false)
            {
                OutputChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public object Output { get; set; }

    public string LookupNameSource { get => FieldDefinition.ReferenceTarget.SearchAtField.Name; }

    [Parameter]
    public int PreloadRecordsCount { get; set; } = 5;

    [Parameter]
    public EventCallback<object> OutputChanged { get; set; }
}