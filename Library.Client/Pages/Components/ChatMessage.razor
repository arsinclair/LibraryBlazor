@namespace Library.Client.Components

@inject IEntityRepository connection

<div class="@ClassName">
    <div class="message-header">
        <a href="/cms/contact/@(Contact.Id)/edit" class="im-link">@Contact.Name</a>
        @{
            if (!string.IsNullOrEmpty(ConversationName))
            {
                <span>@ConversationName</span>
            }
        }

        <span class="time-right">@SentOn</span>
        <a class="open-message-view" href="/cms/message/@Message.Id/edit" target="_blank"><i class="fas fa-external-link-alt fa-sm" aria-hidden="true"></i></a>
    </div>
    @if (hasQuotedMessage)
    {
        <div class="quoted-message">
            @if (quotedMessageAttachments != null) {
                @foreach (var quotedMessageAttachment in quotedMessageAttachments)
                {
                    <ChatMessageAttachment Attachment="@quotedMessageAttachment" />
                }
            }
            @if (quotedMessageLines != null)
            {
                @foreach (var line in quotedMessageLines)
                {
                    <p class="message-text">@line</p>
                }
            }
        </div>
    }
    @if (lines != null)
    {
        <div class="message-text">
            @foreach (var line in lines)
            {
                <p class="message-text">@line</p>
            }
        </div>
    }
    <div class="attachment-group">
        @if (Attachments?.Count > 0)
        {
            @foreach (var attachment in Attachments)
            {
                <ChatMessageAttachment Attachment="@attachment" />
            }
        }
        <div class="new-attachment-button" @onclick="(() => { isUploadFileDialogOpen = true; })"></div>
        @if (isUploadFileDialogOpen)
        {
            <UploadFileDialog OnFileUpload="HandleFileUpload" MessageId="@Message.Id" />
        }
    </div>
</div>

@code {
    List<string> lines;
    bool hasQuotedMessage;
    List<string> quotedMessageLines;
    List<Entity> quotedMessageAttachments;

    List<string> arrayrizeText(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            var normalized = text.Replace("\r\n", "\n").Replace("\r", "\n");
            return normalized.Split("\n", StringSplitOptions.None).ToList();
        }
        return null;
    }


    List<Entity> Attachments;
    bool isUploadFileDialogOpen;
    void HandleFileUpload(Entity? newAttachment)
    {
        if (newAttachment != null)
        {
            if (Attachments == null) Attachments = new List<Entity>();

            Attachments.Add(newAttachment);
        }
        isUploadFileDialogOpen = false;
    }

    protected override void OnParametersSet()
    {
        quotedMessageLines = null; // If this is not nulled, for some unknown reason Blazor leaks state from previous runs
        quotedMessageAttachments = null;
        hasQuotedMessage = false;
        if (Message.Contains("MessageAttachments") && ((List<Entity>)Message["MessageAttachments"]).Count > 0)
        {
            Attachments = Message["MessageAttachments"] as List<Entity>;
        }
        else
        {
            Attachments = null;
        }

        if (Message["QuotedMessageId"] != null)
        {
            hasQuotedMessage = true;
            quotedMessageLines = arrayrizeText((Message["QuotedMessageId"] as EntityReference).Name);
            var query = new QueryExpression("message");
            query.ColumnSet.AddColumns("MessageAttachments");
            query.Criteria.AddQuery("Id", ConditionOperator.Equal, ((EntityReference)Message["QuotedMessageId"]).Id);
            var quotedMessage = connection.Get(query).Single();
            quotedMessageAttachments = quotedMessage["MessageAttachments"] as List<Entity>;
        }
    }

    [Parameter]
    public string ClassName { get; set; }

    [Parameter]
    public Entity Message { get; set; }

    string _messageText;
    [Parameter]
    public string MessageText
    {
        get => _messageText;
        set
        {
            _messageText = value;
            lines = arrayrizeText(value);
        }
    }

    [Parameter]
    public EntityReference Contact { get; set; }

    [Parameter]
    public DateTime? SentOn { get; set; }

    [Parameter]
    public string ConversationName { get; set; }
}