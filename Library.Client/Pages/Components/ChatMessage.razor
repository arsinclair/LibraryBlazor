@namespace Library.Client.Components

<div class="@ClassName">
    <div class="message-header">
        <a href="/CMS/Contact/@(Contact.Id)/Edit" class="im-link">@Contact.Name</a>
        @{
            if (!string.IsNullOrEmpty(ConversationName))
            {
                <span>@ConversationName</span>
            }
        }

        <span class="time-right">@SentOn</span>
        <a class="open-message-view" href="/CMS/message/@Message.Id/edit" target="_blank"><i class="fas fa-external-link-alt fa-sm" aria-hidden="true"></i></a>
    </div>
    @if (quotedMessageLines != null)
    {
        <div class="quoted-message">
            @foreach (var line in quotedMessageLines)
            {
                <p class="message-text">@line</p>
            }
        </div>
    }
    @if (lines != null)
    {
        <div class="message-text">
            @foreach (var line in lines)
            {
                <p class="message-text">@line</p>
            }
        </div>
    }
    <div class="attachment-group">
        @if (Attachments?.Count > 0)
        {
            @foreach (var attachment in Attachments)
            {
                <div class="attachment-item">
                    <a href="/CMS/file/@(attachment.Id)/Edit" target="_blank" title="@attachment["Name"]">
                        @if ((string)attachment["ContentType"] != "image/jpeg")
                        {
                            @attachment["Name"]
                        }
                        else
                        {
                            <img class="attachment-image" src="/api/File/@attachment.Id" />
                        }
                    </a>
                </div>
            }
        }
        <div class="new-attachment-button" @onclick="(() => { isUploadFileDialogOpen = true; })"></div>
        @if (isUploadFileDialogOpen)
        {
            <UploadFileDialog OnFileUpload="HandleFileUpload" MessageId="@Message.Id" />
        }
    </div>
</div>

@code {
    private List<string> lines;
    private List<string> quotedMessageLines;

    private List<string> arrayrizeText(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            var normalized = text.Replace("\r\n", "\n").Replace("\r", "\n");
            return normalized.Split("\n", StringSplitOptions.None).ToList();
        }
        return null;
    }


    private List<Entity> Attachments;
    private bool isUploadFileDialogOpen;
    private void HandleFileUpload(Entity? newAttachment)
    {
        if (newAttachment != null) {
            if (Attachments == null) Attachments = new List<Entity>();
            
            Attachments.Add(newAttachment);
        }
        isUploadFileDialogOpen = false;
    }

    protected override void OnParametersSet()
    {
        if (Message.Contains("MessageAttachments") && ((List<Entity>)Message["MessageAttachments"]).Count > 0)
        {
            Attachments = Message["MessageAttachments"] as List<Entity>;
        }
        else
        {
            Attachments = null;
        }

        if (Message["QuotedMessageId"] != null)
        {
            quotedMessageLines = arrayrizeText((Message["QuotedMessageId"] as EntityReference).Name);
        }
    }

    [Parameter]
    public string ClassName { get; set; }

    [Parameter]
    public Entity Message { get; set; }

    private string _messageText;
    [Parameter]
    public string MessageText
    {
        get => _messageText;
        set
        {
            _messageText = value;
            lines = arrayrizeText(value);
        }
    }

    [Parameter]
    public EntityReference Contact { get; set; }

    [Parameter]
    public DateTime? SentOn { get; set; }

    [Parameter]
    public string ConversationName { get; set; }
}