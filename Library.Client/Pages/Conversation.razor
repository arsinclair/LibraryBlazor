@page "/conversations/new"

@using System.Timers
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using DataAccessLibrary.DataProviders.Interfaces

@inject IContactsData contactsRepository
@inject IMessagesData messagesRepository
@inject IConversationsData conversationsRepository

@namespace Library.Client

<h4>Conversation Creator</h4>

<div class="container">
    <div class="row">
        <div class="col">
            @if (Contacts is null)
            {
                <p>Loading Contacts...</p>
            }
            else
            {
                <input type="text" class="form-control" @oninput="@(e => SearchStarted(e))">
                <div class="scrollable-container">
                    @foreach (var contact in Contacts)
                    {
                        var classname = SelectedContact?.Id != contact.Id ? "contactListItem" : "contactListItem selected";
                        if (!contact.HiddenInUI)
                        {
                            <div class="@classname" id="@contact.Id" @onclick="@(e => ContactSelectionChanged(e, contact.Id))">@contact.FullName</div>
                        }
                    }
                </div>
            }
        </div>
        <div class="col-6">
            @if (SelectedContact != null)
            {
                if (Messages?.Count > 0) {
                    <h5>@($"{@SelectedContact.FullName} Conversation")</h5>
                    <div class="scrollable-container">
                        @foreach (var message in Messages)
                        {
                            string conversationName = Conversations.FirstOrDefault(x => x.Id == message.ConversationId)?.Subject;
                            string className = message.ToContactId == SelectedContact.Id ? "message" : "message darker";
                            <ChatMessage ClassName="@className" MessageText="@message.Text" SentOn="@message.SentOn.ToString()" ConversationName="@conversationName" />
                        }
                    </div>
                }
                else {
                    <h5>@($"No messages")</h5>
                }
            }
            else
            {
                <h4>Select Contact</h4>
            }
        </div>
        <div class="col">
            <form>
                <LookupField InitialValue="@MessageSentFrom" LookupNameSource="FullName" Label="From" @bind-Output="MessageSentFrom" />
                <LookupField InitialValue="@MessageSentTo" LookupNameSource="FullName" Label="To" @bind-Output="MessageSentTo" />
                <DateTimeField Label="Sent On" @bind-Output="MessageSentOn" />
                <div class="form-group">
                    <label>Text</label>
                    <textarea type="text" class="form-control" placeholder="Text">@MessageText</textarea>
                </div>
                <LookupField InitialValue="@MessageConversation" LookupNameSource="Subject" Label="Conversation" @bind-Output="MessageConversation" />
                <LookupField InitialValue="@MessageWebsite" LookupNameSource="Description" Label="Website" @bind-Output="MessageWebsite" PreloadRecordsCount="7" />
                <LookupField InitialValue="@MessagePlatform" LookupNameSource="Name" Label="Platform" @bind-Output="MessagePlatform" PreloadRecordsCount="7"/>
            </form>
        </div>
    </div>
</div>

@code {
    private List<Contact> Contacts;
    private List<Contact> FilteredContacts;
    private List<Message> Messages;
    private List<DataAccessLibrary.Models.Conversation> Conversations;

    private string SearchString;

    private Timer searchTimer = new Timer(400);

    // New Message Section
    private EntityReference MessageSentFrom = new EntityReference("contact");
    private EntityReference MessageSentTo = new EntityReference("contact");
    private DateTime? MessageSentOn;
    private string MessageText;
    private EntityReference MessageConversation = new EntityReference("conversation");
    private EntityReference MessageWebsite = new EntityReference("website");
    private EntityReference MessagePlatform = new EntityReference("communicationplatform");
    // End

    private Contact SelectedContact;

    private void ContactSelectionChanged(MouseEventArgs e, Guid selectedContactId)
    {
        SelectedContact = null;
        Messages = null;
        Conversations = null;
        SelectedContact = Contacts.FirstOrDefault(x => x.Id == selectedContactId);
        LoadMessages();
    }

    protected override async Task OnInitializedAsync()
    {
        Contacts = await contactsRepository.GetContacts(null, "Id", "FullName");
        searchTimer.Elapsed += DoSearch;
    }

    async void LoadMessages()
    {
        Messages = await messagesRepository.GetMessages($"FromContactId = '{SelectedContact.Id}' OR ToContactId = '{SelectedContact.Id}'", "Text", "SentOn", "ConversationId", "FromContactId", "ToContactId");
        Conversations = await conversationsRepository.GetConversations($"Id in (Select ConversationId From Messages Where FromContactId = '{SelectedContact.Id}' OR ToContactId = '{SelectedContact.Id}')", "Id", "Subject");
        StateHasChanged();
    }

    void SearchStarted(ChangeEventArgs e)
    {
        if (SearchString != e.Value.ToString().ToLower())
        {
            SearchString = e.Value.ToString().ToLower();
            searchTimer.Stop();
            searchTimer.Start();
        }
    }

    private void DoSearch(Object source, ElapsedEventArgs e)
    {
        searchTimer.Stop();
        if (!string.IsNullOrEmpty(SearchString))
        {
            foreach (var contact in Contacts)
            {
                if (contact.FullName.ToLower().IndexOf(SearchString) == -1)
                {
                    contact.HiddenInUI = true;
                }
                else
                {
                    contact.HiddenInUI = false;
                }
            }
        }
        InvokeAsync(StateHasChanged);
    }
}