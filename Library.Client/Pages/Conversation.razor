@page "/"
@page "/conversations/new"

@using Attribute = DataAccessLibrary.Attribute

@inject IContactsData contactsRepository
@inject IMessagesData messagesRepository
@inject IConversationsData conversationsRepository
@inject IEntityRepository connection
@inject IMetadataRepository metadataClient
@inject IJSRuntime JSRuntime

@namespace Library.Client

<h4>Conversation Creator</h4>

<div class="container">
    <div class="row">
        <div class="col">
            @if (Contacts is null)
            {
                <p>Loading Contacts...</p>
            }
            else
            {
                <input type="text" class="form-control" @oninput="@(e => SearchStarted(e))">
                <div class="scrollable-container">
                    @foreach (var contact in Contacts)
                    {
                        var classname = SelectedContact?.Id != contact.Id ? "contactListItem" : "contactListItem selected";
                        if (!contact.HiddenInUI)
                        {
                            <div class="@classname" id="@contact.Id" @onclick="@(e => ContactSelectionChanged(e, contact.Id))">@contact.FullName</div>
                        }
                    }
                </div>
            }
        </div>
        <div class="col-6">
            @if (SelectedContact != null)
            {
                if (Messages?.Count > 0) {
                    <h5>@($"{@SelectedContact.FullName} Conversation")</h5>
                    <div class="scrollable-container" id="messages-container">
                        @foreach (var message in Messages)
                        {
                            string conversationName = Conversations.FirstOrDefault(x => x.Id == message.ConversationId)?.Subject;
                            string className = message.ToContactId == SelectedContact.Id ? "message" : "message darker";
                            <ChatMessage ClassName="@className" MessageText="@message.Text" SentOn="@(message.SentOn ?? message.ProvisionalSentOn)" ConversationName="@conversationName" />
                        }
                    </div>
                }
                else {
                    <h5>@($"No messages")</h5>
                }
            }
            else
            {
                <h4>Select Contact</h4>
            }
        </div>
        <div class="col">
            <form>
                <div class="reverse-button" @onclick="ReverseAddressees">
                    <i class="fas fa-exchange-alt fa-rotate-90"></i>
                </div>
                <EntityAttributes Attributes="newEntityAttributes" FieldDefinitions="MessagesFields" />
                <button type="button" class="btn btn-info" @onclick="CreateEntity">Add Message</button>
            </form>
        </div>
    </div>
</div>

@code {
    private List<Contact> Contacts;
    private List<Contact> FilteredContacts;
    private List<Message> Messages;
    private List<SysField> MessagesFields;
    private List<DataAccessLibrary.Models.Conversation> Conversations;
    private List<Attribute> newEntityAttributes = new List<DataAccessLibrary.Attribute>();
    private string SearchString;
    private Timer searchTimer = new Timer(400);

    private Contact SelectedContact;

    private void ContactSelectionChanged(MouseEventArgs e, Guid selectedContactId)
    {
        SelectedContact = null;
        Messages = null;
        Conversations = null;
        SelectedContact = Contacts.FirstOrDefault(x => x.Id == selectedContactId);
        newEntityAttributes.Single(x => x.Key == "ToContactId").Value = new EntityReference("contact", SelectedContact.Id);
        LoadMessages();
    }

    private void ReverseAddressees()
    {
        var from = newEntityAttributes.Single(x => x.Key == "FromContactId").Value;
        var to = newEntityAttributes.Single(x => x.Key == "ToContactId").Value;
        newEntityAttributes.Single(x => x.Key == "ToContactId").Value = from;
        newEntityAttributes.Single(x => x.Key == "FromContactId").Value = to;
    }

    protected override async Task OnInitializedAsync()
    {
        MessagesFields = metadataClient.GetFields("Message");
        newEntityAttributes.Add(new Attribute("FromContactId", new EntityReference("contact", Guid.Parse("50A79A31-788A-E811-8F78-08002791E63C"))));
        newEntityAttributes.Add(new Attribute("ToContactId"));
        newEntityAttributes.Add(new Attribute("SentOn"));
        newEntityAttributes.Add(new Attribute("ProvisionalSentOn"));
        newEntityAttributes.Add(new Attribute("Text"));
        newEntityAttributes.Add(new Attribute("ConversationId"));
        newEntityAttributes.Add(new Attribute("WebsiteId"));
        newEntityAttributes.Add(new Attribute("PlatformId"));
        newEntityAttributes.Add(new Attribute("TextFormat", "BBCode"));

        Contacts = await contactsRepository.GetContacts(null, "Id", "FullName");
        searchTimer.Elapsed += DoSearch;
    }

    async void LoadMessages()
    {
        Messages = await messagesRepository.GetMessages($"FromContactId = '{SelectedContact.Id}' OR ToContactId = '{SelectedContact.Id}'", "Text", "SentOn", "ConversationId", "FromContactId", "ToContactId", "ProvisionalSentOn");
        Messages = Messages.OrderBy(x => x, new MessagesComparer()).ToList();
        Conversations = await conversationsRepository.GetConversations($"Id in (Select ConversationId From Messages Where FromContactId = '{SelectedContact.Id}' OR ToContactId = '{SelectedContact.Id}')", "Id", "Subject");
        StateHasChanged();
        await JSRuntime.InvokeAsync<string>("userJsFunctions.scrollToBottom", "messages-container");
    }

    private async void CreateEntity()
    {
        Entity message = new Entity("message");
        foreach(Attribute attr in newEntityAttributes)
        {
            message[attr.Key] = attr.Value;
        }

        try
        {
            var newId = connection.Create(message);
            var newMessage = new Message()
            {
                ConversationId = ((EntityReference)message["ConversationId"]).Id,
                FromContactId = ((EntityReference)message["FromContactId"]).Id,
                Id = newId,
                PlatformId = ((EntityReference)message["PlatformId"]).Id,
                Text = (string)message["Text"],
                SentOn = (DateTime?)message["SentOn"],
                ProvisionalSentOn = (DateTime?)message["ProvisionalSentOn"],
                ToContactId = ((EntityReference)message["ToContactId"]).Id,
                WebsiteId = ((EntityReference)message["WebsiteId"]).Id
            };
            Messages.Add(newMessage);
            Messages = Messages.OrderBy(x => x, new MessagesComparer()).ToList();
            newEntityAttributes.Single(x => x.Key == "Text").Value = string.Empty;
            await JSRuntime.InvokeAsync<string>("userJsFunctions.scrollToBottom", "messages-container");
            if (newId == Guid.Empty)
            {
                throw new Exception("Entity Creation Error");
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    void SearchStarted(ChangeEventArgs e)
    {
        if (SearchString != e.Value.ToString().ToLower())
        {
            SearchString = e.Value.ToString().ToLower();
            searchTimer.Stop();
            searchTimer.Start();
        }
    }

    private void DoSearch(Object source, ElapsedEventArgs e)
    {
        searchTimer.Stop();
        if (!string.IsNullOrEmpty(SearchString))
        {
            foreach (var contact in Contacts)
            {
                if (contact.FullName.ToLower().IndexOf(SearchString) == -1)
                {
                    contact.HiddenInUI = true;
                }
                else
                {
                    contact.HiddenInUI = false;
                }
            }
        }
        InvokeAsync(StateHasChanged);
    }
}