@page "/"
@page "/conversations/new"

@using Attribute = DataAccessLibrary.Attribute

@inject IEntityRepository connection
@inject IMetadataRepository metadataClient
@inject IJSRuntime JSRuntime

@namespace Library.Client

<h4>Conversation Creator</h4>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            @if (Conversations is null || Conversations.Count == 0)
            {
                <p>Loading Conversations...</p>
            }
            else
            {
                <input type="text" class="form-control form-control-sm rounded-0" @oninput="@(e => SearchStarted(e))">
                <div class="scrollable-container">
                    @foreach (var conversation in VisibleConversations)
                    {
                        var classname = SelectedConversation?.Id != conversation.Id ? "listItem" : "listItem selected";
                        var isChat = conversation.LogicalName.ToLower() == "conversation" ? "Chat:" : string.Empty;
                        <div class="@classname" id="@conversation.Id" @onclick="@(e => ConversationSelectionChanged(e, conversation.Id))">@isChat @conversation.Name</div>
                    }
                </div>
            }
        </div>
        <div class="col-6">
            @if (SelectedConversation != null)
            {
                if (Messages?.Count > 0)
                {
                    <h5><a href="/cms/conversation/@SelectedConversation.Id/edit" target="_blank">@(SelectedConversation.Name)</a> â€” @TotalCount messages</h5>
                    <div class="scrollable-container" id="messages-container">
                        @foreach (Entity message in Messages)
                        {
                            string conversationName = ((EntityReference)message["ConversationId"])?.Name;
                            string className = DefaultContact.SameAs((EntityReference)message["FromContactId"]) ? "message" : "message darker";
                            DateTime? sentOn = (DateTime?)(message["SentOn"] ?? message["ProvisionalSentOn"]);
                            <ChatMessage ClassName="@className"
                                MessageText="@((string)message["Text"])"
                                SentOn="@sentOn"
                                Message="@message"
                                ConversationName="@conversationName"
                                Contact="@((EntityReference)message["FromContactId"])" 
                            />
                        }
                    </div>
                    <Pagination TotalCount="@TotalCount" ListQuery="@listQuery" RecordsPerPage=@RecordsPerPage ListQueryChanged="HandleListQueryChanged" />
                }
                else
                {
                    <h5>@($"No messages")</h5>
                }
            }
            else
            {
                <h4>Select Contact</h4>
            }
        </div>
        <div class="col">
            <form class="row g-1">
                <div class="reverse-button" @onclick="ReverseAddressees">
                    <i class="fas fa-exchange-alt fa-rotate-90"></i>
                </div>
                <EntityAttributes Attributes="newEntityAttributes" FieldDefinitions="MessagesFields" />
                <div class="col-auto">
                    <button type="button" class="btn btn-info rounded-0" @onclick="CreateEntity">Add Message</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    List<EntityReference> Conversations = new List<EntityReference>();
    List<EntityReference> VisibleConversations = new List<EntityReference>();
    List<Entity> Messages = new List<Entity>();
    int TotalCount = 0;
    int RecordsPerPage = 50;
    string[] messagesFields = new[] { "Text", "SentOn", "ConversationId", "FromContactId", "ToContactId", "ProvisionalSentOn", "MessageAttachments", "QuotedMessageId" };
    List<SysField> MessagesFields;
    QueryExpression listQuery;
    List<Attribute> newEntityAttributes = new List<DataAccessLibrary.Attribute>();
    string SearchString;
    Timer searchTimer = new Timer(400);
    EntityReference DefaultContact = new EntityReference("contact", Guid.Parse("50A79A31-788A-E811-8F78-08002791E63C"));

    EntityReference SelectedConversation;

    void ConversationSelectionChanged(MouseEventArgs e, Guid selectedId)
    {
        SelectedConversation = null;
        Messages.Clear();
        TotalCount = 0;
        SelectedConversation = Conversations.FirstOrDefault(x => x.Id == selectedId);
        if (SelectedConversation.LogicalName.ToLower() == "contact")
        {
            newEntityAttributes.Single(x => x.Key == "ToContactId").Value = SelectedConversation;
        }
        else if (SelectedConversation.LogicalName.ToLower() == "conversation")
        {
            newEntityAttributes.Single(x => x.Key == "ConversationId").Value = SelectedConversation;
        }
        PopulateConverationQueryFilter();
        LoadMessages();
    }

    private void HandleListQueryChanged(QueryExpression newListQuery)
    {
        listQuery = newListQuery;
        LoadMessages();
    }

    void ReverseAddressees()
    {
        var from = newEntityAttributes.Single(x => x.Key == "FromContactId").Value;
        var to = newEntityAttributes.Single(x => x.Key == "ToContactId").Value;
        newEntityAttributes.Single(x => x.Key == "ToContactId").Value = from;
        newEntityAttributes.Single(x => x.Key == "FromContactId").Value = to;
    }

    void PopulateConverationQueryFilter()
    {
        if (SelectedConversation != null)
        {
            listQuery.Criteria.AddQuery(new ConditionExpression("FromContactId", ConditionOperator.Equal, SelectedConversation.Id));
            listQuery.Criteria.AddQuery(new ConditionExpression("ToContactId", ConditionOperator.Equal, SelectedConversation.Id));
            listQuery.Criteria.AddQuery(new ConditionExpression("ConversationId", ConditionOperator.Equal, SelectedConversation.Id));
            listQuery.Criteria.QueryOperator = LogicalOperator.Or;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        listQuery = new QueryExpression("message");
        listQuery.ColumnSet.AddColumns(messagesFields);
        PopulateConverationQueryFilter();

        listQuery.AddOrder("SentOn", "ProvisionalSentOn", OrderType.Descending);
        listQuery.PageInfo.Count = RecordsPerPage;
        listQuery.PageInfo.PageNumber = 0;

        MessagesFields = metadataClient.GetFields("Message");
        newEntityAttributes.Add(new Attribute("FromContactId", DefaultContact));
        newEntityAttributes.Add(new Attribute("ToContactId"));
        newEntityAttributes.Add(new Attribute("SentOn"));
        newEntityAttributes.Add(new Attribute("ProvisionalSentOn"));
        newEntityAttributes.Add(new Attribute("Text"));
        newEntityAttributes.Add(new Attribute("ConversationId"));
        newEntityAttributes.Add(new Attribute("WebsiteId"));
        newEntityAttributes.Add(new Attribute("PlatformId"));
        newEntityAttributes.Add(new Attribute("TextFormat"));

        if (Conversations.Count == 0)
        {
            var contactsQE = new QueryExpression("contact")
                {
                    ColumnSet = new ColumnSet("FullName")
                };
            IEnumerable<EntityReference> contactsEF = connection.Get(contactsQE).Select(x => x.ToEntityReference(x["FullName"] as string));

            var conversationsQE = new QueryExpression("conversation")
                {
                    ColumnSet = new ColumnSet("Subject")
                };
            IEnumerable<EntityReference> conversationsEF = connection.Get(conversationsQE).Select(x => x.ToEntityReference(x["Subject"] as string));
            Conversations = contactsEF.Concat(conversationsEF).ToList();
            VisibleConversations.AddRange(Conversations);
        }

        searchTimer.Elapsed += DoSearch;
    }

    void LoadMessages()
    {
        Messages = connection.Get(listQuery).ToList();
        TotalCount = connection.RetrieveTotalRecordCount("message", listQuery.Criteria);

        StateHasChanged(); // ?
    }

    void CreateEntity()
    {
        Entity message = new Entity("message");
        foreach (Attribute attr in newEntityAttributes)
        {
            message[attr.Key] = attr.Value;
        }

        Guid newId = connection.Create(message);

        message.Id = newId;
        message["Id"] = newId;
        Messages.Add(message);
        Messages = Messages.OrderBy(x => x, new MessagesComparer()).ToList();
        newEntityAttributes.Single(x => x.Key == "Text").Value = string.Empty;
    }

    void SearchStarted(ChangeEventArgs e)
    {
        if (SearchString != e.Value.ToString().ToLower())
        {
            SearchString = e.Value.ToString().ToLower();
            searchTimer.Stop();
            searchTimer.Start();
        }
    }

    void DoSearch(Object source, ElapsedEventArgs e)
    {
        searchTimer.Stop();
        if (!string.IsNullOrEmpty(SearchString))
        {
            VisibleConversations.Clear();
            foreach (var conversation in Conversations)
            {
                if (conversation.Name.ToLower().IndexOf(SearchString) != -1)
                {
                    VisibleConversations.Add(conversation);
                }
            }
        }
        else
        {
            VisibleConversations = Conversations;
        }
        InvokeAsync(StateHasChanged);
    }
}