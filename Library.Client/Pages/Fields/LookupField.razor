@using System.Timers
@using DataAccessLibrary.Models
@using DataAccessLibrary.Interfaces

@inject IEntityRepository connection

@namespace Library.Client

<div class="form-group form-group-lookup">
    <label>@Label</label>
    <div class="form-control lookup lookup-bullet" @onclick="ToggleSearchMenu">@(Output?.Name ?? "(none)")</div>
    <div class="search-menu @isMenuHiddenClassName">
        <div class="search-menu-header">
            <label>Search for @Output?.LogicalName</label>
            <div @onclick="ToggleSearchMenu"><i class="fas fa-times search-menu-close-icon" aria-hidden="true"></i></div>
        </div>
        <hr>
        <input type="text" placeholder="Search" @oninput="@(e => SearchStarted(e))" @bind="SearchString">
        <div class="search-results">
            @foreach (var item in SearchResults)
            {
                <div @onclick="@(e => SearchResultSelected(item.Id.ToString()))" class="search-result">@item[LookupNameSource]?.ToString()</div>
            }
        </div>
        <hr>
        <div>@SearchResults.Count results found.</div>
    </div>
</div>

@code {
    #region Logic
    private string isMenuHiddenClassName = "hidden";

    private Entity GetSelectedEntity(EntityReference entityReference, string searchFieldName)
    {
        return connection.GetById(entityReference, searchFieldName);
    }

    private void ToggleSearchMenu()
    {
        if (string.IsNullOrEmpty(isMenuHiddenClassName))
        {
            CloseSearchMenu();
        }
        else
        {
            OpenSearchMenu();
        }
    }

    private void CloseSearchMenu()
    {
        ClearSearchResults();
        isMenuHiddenClassName = "hidden";
    }

    private void OpenSearchMenu()
    {
        ClearSearchResults();
        if (PreloadRecordsCount > 0)
        {
            var _searchResults = connection.Get(entityName: Output.LogicalName, count: PreloadRecordsCount, columns: LookupNameSource);
            SearchResults = _searchResults.ToList();
        }
        isMenuHiddenClassName = string.Empty;
        StateHasChanged();
    }

    private void ClearSearchResults()
    {
        SearchString = string.Empty;
        SearchResults.Clear();
    }

    private void SearchResultSelected(string id)
    {
        var _id = Guid.Parse(id);
        var result = SearchResults.Single(x => x.Id == _id);
        Output = result.ToEntityReference(result[LookupNameSource]?.ToString());
        ClearSearchResults();
        ToggleSearchMenu();
    }

    private Timer searchTimer = new Timer(400);
    private string SearchString;
    private List<Entity> SearchResults = new List<Entity>();
    void SearchStarted(ChangeEventArgs e)
    {
        if (SearchString.ToLower() != e.Value.ToString().ToLower())
        {
            SearchString = e.Value.ToString();
            if (SearchString.Length >= 3)
            {
                searchTimer.Stop();
                searchTimer.Start();
            }
        }
    }

    private async void DoSearch(Object source, ElapsedEventArgs e)
    {
        searchTimer.Stop();
        if (!string.IsNullOrEmpty(SearchString))
        {
            var _searchResults = connection.Get(entityName: Output.LogicalName, whereClause: $"{LookupNameSource} LIKE '%{SearchString}%'", columns: LookupNameSource);
            SearchResults = _searchResults.ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        if (Output?.Id != Guid.Empty && !string.IsNullOrEmpty(Output?.LogicalName))
        {
            var entity = GetSelectedEntity(Output, LookupNameSource);
            if (entity != null && entity.Attributes.Contains(LookupNameSource))
            {
                Output.Name = entity[LookupNameSource].ToString();
            }
        }
    }

    protected override void OnInitialized()
    {
        searchTimer.Elapsed += DoSearch;
    }
    #endregion

    #region Input / Output
    [Parameter]
    public string Label { get; set; }

    private EntityReference _output;
    [Parameter]
    public EntityReference Output
    {
        get => _output;
        set
        {
            if (_output == value) return;
            _output = value;
            OutputChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public string LookupNameSource { get; set; }

    [Parameter]
    public int PreloadRecordsCount { get; set; } = 0;

    [Parameter]
    public EventCallback<EntityReference> OutputChanged { get; set; }
    #endregion
}