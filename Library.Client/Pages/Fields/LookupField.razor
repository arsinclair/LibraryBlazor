@using System.Timers
@using DataAccessLibrary.Models
@using DataAccessLibrary.Interfaces

@inject IEntityRepository connection

@namespace Library.Client

<form>
    <div class="form-group form-group-lookup">
        <label>@label</label>
        <div id="@_id" class="form-control lookup lookup-bullet" @onclick="ToggleSearchMenu">@_name</div>
        <div class="search-menu @isMenuHiddenClassName">
            <input type="text" placeholder="Search" @oninput="@(e => SearchStarted(e))" @bind="SearchString">
            <div class="search-results">
                @foreach (var item in SearchResults)
                {
                    <div @onclick="@(e => SearchResultSelected(item.Id.ToString()))" class="search-result">@item["FullName"].Value.ToString()</div>
                }
            </div>
        </div>
    </div>
</form>

@code {
    private string _id;
    private string _name;

    [Parameter]
    public string entityName { get; set; }

    [Parameter]
    public string selectedId { get; set; }

    [Parameter]
    public string searchFieldName { get; set; }

    [Parameter]
    public string label { get; set; }

    [Parameter]
    public EntityReference selectedRecord { get; set; }

    [Parameter]
    public Action<EntityReference> callback { get; set; }

    private Entity selectedEntity { get; set; }

    private string isMenuHiddenClassName = "hidden";

    private async Task<Entity> GetSelectedEntity(string entityName, string selectedId, string searchFieldName)
    {
        return await connection.GetById(selectedId, entityName, searchFieldName);
    }

    private void ToggleSearchMenu()
    {
        ClearSearchResults();
        isMenuHiddenClassName = string.IsNullOrEmpty(isMenuHiddenClassName) ? "hidden" : string.Empty;
    }

    private void ClearSearchResults()
    {
        SearchString = string.Empty;
        SearchResults.Clear();
    }

    private void SearchResultSelected(string id)
    {
        var _id = Guid.Parse(id);
        selectedEntity = SearchResults.Single(x => x.Id == _id);
        ClearSearchResults();
        ToggleSearchMenu();
        handleSelectedEntity();
        StateHasChanged();
    }

    private Timer searchTimer = new Timer(400);
    private string SearchString;
    private List<Entity> SearchResults = new List<Entity>();
    void SearchStarted(ChangeEventArgs e)
    {
        if (SearchString.ToLower() != e.Value.ToString().ToLower())
        {
            SearchString = e.Value.ToString();
            if (SearchString.Length >= 3)
            {
                searchTimer.Stop();
                searchTimer.Start();
            }
        }
    }

    private async void DoSearch(Object source, ElapsedEventArgs e)
    {
        searchTimer.Stop();
        if (!string.IsNullOrEmpty(SearchString))
        {
            var _searchResults = await connection.Get(entityName, $"{searchFieldName} LIKE '%{SearchString}%'", "FullName");
            SearchResults = _searchResults.ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void handleSelectedEntity()
    {
        if (selectedEntity == null)
        {
            _id = string.Empty;
            _name = "(none)";
        }
        else
        {
            _id = selectedEntity.Id.ToString() + "-" + entityName;
            _name = selectedEntity[searchFieldName]?.Value.ToString();
            selectedRecord = new EntityReference(selectedEntity.EntityName, selectedEntity.Id);
            callback(selectedRecord);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (selectedRecord != null && selectedEntity == null)
        {
            selectedEntity = await GetSelectedEntity(entityName, selectedId, searchFieldName);
        }
        handleSelectedEntity();

        searchTimer.Elapsed += DoSearch;
    }
}